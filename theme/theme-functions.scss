@import "theme-variables";

/**
  Allows files to access colors by concept/shade vs. specific variable name.
  Intended to abstract the developer from remembering specific variables and 
  allow think in terms of UI element terms "background colors", "state colors", etc.
  
  ex. `get-theme-color(state, info)`
  **/
@function get-theme-color($color-group, $color-variant: "base") {
  @if ($color-variant != null) {
    @return map-get(map-get($yh-colors, $color-group), $color-variant);
  } @else {
    @return map-get($yh-colors, $color-group);
  }
}
/**
    Access the widths of components by state
    */
@function get-component-width($component-name, $component-state: "minimized") {
  @if ($component-state != null) {
    @return map-get(
      map-get($yh-component-widths, $component-name),
      $component-state
    );
  } @else {
    @return map-get($yh-component-widths, $component-name);
  }
}
/**
    Responsive font size management function to gen font sizes at
    certain breakpoints;
    **/
@mixin font-size($fs-map, $fs-breakpoints: $breakpoints) {
  @each $fs-breakpoint, $fs-font-size in $fs-map {
    @if $fs-breakpoint == null {
      font-size: $fs-font-size;
    } @else {
      // If $fs-font-size is a key that exists in
      // $fs-breakpoints, use the value
      @if map-has-key($fs-breakpoints, $fs-breakpoint) {
        $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
      }
      @media screen and (min-width: $fs-breakpoint) {
        font-size: $fs-font-size;
      }
    }
  }
}
